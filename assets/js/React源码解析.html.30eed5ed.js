"use strict";(self.webpackChunkmy_vuepress_site=self.webpackChunkmy_vuepress_site||[]).push([[225],{293:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>o,data:()=>c});var p=a(641);const t=[(0,p.Fv)('<p><a name="CPQPR"></a></p><h2 id="react虚拟dome的渲染" tabindex="-1"><a class="header-anchor" href="#react虚拟dome的渲染"><span>React虚拟dome的渲染</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">CreateElemenet</span><span class="token punctuation">(</span><span class="token parameter">ele<span class="token punctuation">,</span> props<span class="token punctuation">,</span> <span class="token operator">...</span>children</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">let</span> VirtualDom <span class="token operator">=</span> <span class="token punctuation">{</span></span>\n<span class="line">        $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;react.element&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>\n<span class="line">        <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>\n<span class="line">        <span class="token literal-property property">ref</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>\n<span class="line">        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>\n<span class="line">        <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">let</span> len <span class="token operator">=</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>\n<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    VirtualDom<span class="token punctuation">[</span><span class="token string">&quot;type&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> ele<span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>props <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        VirtualDom<span class="token punctuation">[</span><span class="token string">&quot;props&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token operator">...</span>props<span class="token punctuation">,</span></span>\n<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> VirtualDom<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children <span class="token operator">=</span> children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> VirtualDom<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children <span class="token operator">=</span> children<span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">return</span> VirtualDom<span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"><span class="token keyword">var</span> dome <span class="token operator">=</span> <span class="token function">CreateElemenet</span><span class="token punctuation">(</span><span class="token string">&quot;h1&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">&quot;greeting&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dome<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">function</span> <span class="token function">each</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">const</span> keys <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    keys<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token function">callback</span><span class="token punctuation">(</span>propsp<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"><span class="token comment">/*render 把虚拟的dome渲染成真实demo*/</span></span>\n<span class="line"><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">VirtualDOM<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">let</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> props <span class="token punctuation">}</span> <span class="token operator">=</span> VirtualDOM<span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> type <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">let</span> ele <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token function">each</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&quot;className&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token comment">// 对class的赋值</span></span>\n<span class="line">                ele<span class="token punctuation">.</span>className <span class="token operator">=</span> value<span class="token punctuation">;</span></span>\n<span class="line">                <span class="token keyword">return</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&quot;style&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token function">each</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">styleVal<span class="token punctuation">,</span> styleKey</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">                    ele<span class="token punctuation">.</span>style<span class="token punctuation">[</span>styleKey<span class="token punctuation">]</span> <span class="token operator">=</span> styleVal<span class="token punctuation">;</span></span>\n<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">                <span class="token keyword">return</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&quot;children&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token keyword">let</span> children <span class="token operator">=</span> value<span class="token punctuation">;</span></span>\n<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> children <span class="token operator">==</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> children <span class="token operator">=</span> <span class="token punctuation">[</span>children<span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line">                children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> child <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                        ele<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">                    <span class="token punctuation">}</span></span>\n<span class="line">                    <span class="token function">render</span><span class="token punctuation">(</span>chind<span class="token punctuation">,</span> ele<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">                <span class="token keyword">return</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">            ele<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"><span class="token function">render</span><span class="token punctuation">(</span>dome<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="l5wlN"></a></p><h2 id="react生命周期" tabindex="-1"><a class="header-anchor" href="#react生命周期"><span>React生命周期</span></a></h2><p><img src="/image/react生命周期.jpg" alt=""><a name="brI7A"></a></p><h2 id="purecomponent与component-区别" tabindex="-1"><a class="header-anchor" href="#purecomponent与component-区别"><span>PureComponent与Component 区别</span></a></h2><ol><li>PureComponent 会自动添加一个shouldComponentUpdata生命周期 <ol><li>在此周期中，它会对新老的属性/状态，会做一个浅对比</li><li>如果经过浅对比，发现属性和状态都没有发生改变，则返回false[也就是不会在更新虚拟dome]</li></ol></li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">  <span class="token keyword">return</span> obj<span class="token operator">!==</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(Object|function)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">)</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"><span class="token keyword">function</span> <span class="token function">ShallowEqual</span><span class="token punctuation">(</span><span class="token parameter">objA<span class="token punctuation">,</span>objB</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">  <span class="token comment">// 先判断当前传入的对象是否为object,如果不是直接返回false,不在对比</span></span>\n<span class="line">  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>objA<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>objB<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span></span>\n<span class="line">  <span class="token comment">// 在判断两个值原型地址是否一致,如果一致返回false</span></span>\n<span class="line">  <span class="token keyword">if</span><span class="token punctuation">(</span>objA <span class="token operator">===</span> objB<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span></span>\n<span class="line">  <span class="token comment">//在对比两个值的成员数量，如果不一致也返回false</span></span>\n<span class="line">  <span class="token keyword">let</span> keysA <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>objA<span class="token punctuation">)</span></span>\n<span class="line">  <span class="token keyword">let</span> keysB <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>objB<span class="token punctuation">)</span></span>\n<span class="line">  <span class="token keyword">if</span><span class="token punctuation">(</span>keysA<span class="token punctuation">.</span>length<span class="token operator">!==</span>keysB<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span></span>\n<span class="line">  keysA<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>\n<span class="line">     <span class="token comment">// 如果数量一致，在判断是否成员一致 或者成员值是否一致</span></span>\n<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>objB<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>objA<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>objB<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">      <span class="token keyword">return</span> <span class="token boolean">false</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>\n<span class="line">  <span class="token keyword">return</span> <span class="token boolean">true</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="RjYeW"></a></p><h2 id="关于ref解读" tabindex="-1"><a class="header-anchor" href="#关于ref解读"><span>关于ref解读</span></a></h2><ol><li>受控组件：基于修改数据/状态，让视图更新，达到需要的效果</li></ol><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Components</span> <span class="token punctuation">{</span></span>\n<span class="line">   </span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>非受控组件，基于ref获取dome元素，操作dome元素，实现需求和效果 <ol><li>给需要获取元素设置 ref=&quot;xxx&quot;,后去基于this.refs.xxx去获取相应的dome元素 //react严格模式下会报错</li><li>把ref 属性设置成一个函数 <ol><li>x是函数的形参，存储的是当前的dome元素</li><li>然后我们元素的dome元素x直接挂到实列的某个属性上去</li></ol></li><li>基于React.CreateRef() 创建一个ref对象===&gt; {current:null} <ol><li>获取 this.xxxx.current</li></ol></li></ol></li></ol><p>原理：在render渲染的时候，会获取VirtualDOM的ref属性<br>如果是一个字符串，则会给this.refs 增加一个成员，成员值就是当前的dome元素<br>如果是一个函数，则会把当前dome元素传递给参数<br>如果ref的属性值是一个ref对象，则会把dome元素赋值为对象的current属性</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Components</span> <span class="token punctuation">{</span></span>\n<span class="line">  box3 <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">CreateRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">   <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>\n<span class="line">     <span class="token keyword">return</span><span class="token punctuation">(</span></span>\n<span class="line">       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>titlebox<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">你好世界</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>\n<span class="line">       <span class="token punctuation">{</span><span class="token comment">/*  把ref 属性设置成一个函数*/</span><span class="token punctuation">}</span></span>\n<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">x</span><span class="token operator">=&gt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>box<span class="token operator">=</span>x<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">你好世界</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>\n<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>box3<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">你好世界</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>\n<span class="line">     <span class="token punctuation">)</span></span>\n<span class="line">   <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>给类组件设置ref，目的：获取当前调用组件创建的实列，后续可以根据实列获取子组件中的相关信息<br>给函数组件ref会报错，但是可以基于React.forwardRef实现ref的转发，目的：获取函数组件内部的元素</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="line"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Chind1</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Components</span> <span class="token punctuation">{</span></span>\n<span class="line">  state<span class="token operator">=</span><span class="token punctuation">{</span></span>\n<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;chind&quot;</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">return</span><span class="token punctuation">(</span></span>\n<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">你好世界</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>\n<span class="line">    <span class="token punctuation">)</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"><span class="token comment">// 函数组件</span></span>\n<span class="line"><span class="token keyword">const</span> chind2 <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">forWardRef</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span>ref</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>\n<span class="line">  </span>\n<span class="line">   <span class="token keyword">return</span><span class="token punctuation">(</span></span>\n<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">你好世界</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>\n<span class="line">    <span class="token punctuation">)</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Components</span> <span class="token punctuation">{</span></span>\n<span class="line">  box3 <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">CreateRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">   <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>\n<span class="line">     <span class="token keyword">return</span><span class="token punctuation">(</span></span>\n<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Chind1</span></span>  <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>chind1<span class="token operator">=</span>x<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span><span class="token comment">// 获取当前调用组件创建的实列</span></span>\n<span class="line">       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Chind2</span></span>  <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>chind2<span class="token operator">=</span>x<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span> <span class="token comment">// 获取当前调用组件的元素</span></span>\n<span class="line">     <span class="token punctuation">)</span></span>\n<span class="line">   <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',18)],e={},o=(0,a(6262).A)(e,[["render",function(n,s){return(0,p.uX)(),(0,p.CE)("div",null,t)}]]),c=JSON.parse('{"path":"/React%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"React虚拟dome的渲染","slug":"react虚拟dome的渲染","link":"#react虚拟dome的渲染","children":[]},{"level":2,"title":"React生命周期","slug":"react生命周期","link":"#react生命周期","children":[]},{"level":2,"title":"PureComponent与Component 区别","slug":"purecomponent与component-区别","link":"#purecomponent与component-区别","children":[]},{"level":2,"title":"关于ref解读","slug":"关于ref解读","link":"#关于ref解读","children":[]}],"git":{},"filePathRelative":"React源码解析.md","excerpt":"<p><a name=\\"CPQPR\\"></a></p>\\n<h2>React虚拟dome的渲染</h2>\\n<div class=\\"language-javascript\\" data-highlighter=\\"prismjs\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"line\\"><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">CreateElemenet</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">ele<span class=\\"token punctuation\\">,</span> props<span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">...</span>children</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">let</span> VirtualDom <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">        $$<span class=\\"token keyword\\">typeof</span><span class=\\"token operator\\">:</span> <span class=\\"token function\\">Symbol</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"react.element\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span></span>\\n<span class=\\"line\\">        <span class=\\"token literal-property property\\">key</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span></span>\\n<span class=\\"line\\">        <span class=\\"token literal-property property\\">ref</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span></span>\\n<span class=\\"line\\">        <span class=\\"token literal-property property\\">type</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span></span>\\n<span class=\\"line\\">        <span class=\\"token literal-property property\\">props</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span></span>\\n<span class=\\"line\\">    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>children<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">let</span> len <span class=\\"token operator\\">=</span> children<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>len<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">    VirtualDom<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\\"type\\"</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> ele<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>props <span class=\\"token operator\\">!==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">        VirtualDom<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\\"props\\"</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">            <span class=\\"token operator\\">...</span>props<span class=\\"token punctuation\\">,</span></span>\\n<span class=\\"line\\">        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">    <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>len <span class=\\"token operator\\">==</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> VirtualDom<span class=\\"token punctuation\\">.</span>props<span class=\\"token punctuation\\">.</span>children <span class=\\"token operator\\">=</span> children<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>len <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> VirtualDom<span class=\\"token punctuation\\">.</span>props<span class=\\"token punctuation\\">.</span>children <span class=\\"token operator\\">=</span> children<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">return</span> VirtualDom<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">var</span> dome <span class=\\"token operator\\">=</span> <span class=\\"token function\\">CreateElemenet</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"h1\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">className</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"greeting\\"</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"hello\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>dome<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">each</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">props<span class=\\"token punctuation\\">,</span> callback</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">const</span> keys <span class=\\"token operator\\">=</span> Reflect<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ownKeys</span><span class=\\"token punctuation\\">(</span>props<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">    keys<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">forEach</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">key</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">        <span class=\\"token function\\">callback</span><span class=\\"token punctuation\\">(</span>propsp<span class=\\"token punctuation\\">[</span>key<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"><span class=\\"token comment\\">/*render 把虚拟的dome渲染成真实demo*/</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">render</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">VirtualDOM<span class=\\"token punctuation\\">,</span> container</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">let</span> <span class=\\"token punctuation\\">{</span> type<span class=\\"token punctuation\\">,</span> props <span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> VirtualDOM<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">typeof</span> type <span class=\\"token operator\\">===</span> <span class=\\"token string\\">\\"string\\"</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">        <span class=\\"token keyword\\">let</span> ele <span class=\\"token operator\\">=</span> document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">createElement</span><span class=\\"token punctuation\\">(</span>type<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">        <span class=\\"token function\\">each</span><span class=\\"token punctuation\\">(</span>props<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">value<span class=\\"token punctuation\\">,</span> key</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>key <span class=\\"token operator\\">===</span> <span class=\\"token string\\">\\"className\\"</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">                <span class=\\"token comment\\">// 对class的赋值</span></span>\\n<span class=\\"line\\">                ele<span class=\\"token punctuation\\">.</span>className <span class=\\"token operator\\">=</span> value<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">                <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">            <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>key <span class=\\"token operator\\">===</span> <span class=\\"token string\\">\\"style\\"</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">                <span class=\\"token function\\">each</span><span class=\\"token punctuation\\">(</span>value<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">styleVal<span class=\\"token punctuation\\">,</span> styleKey</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">                    ele<span class=\\"token punctuation\\">.</span>style<span class=\\"token punctuation\\">[</span>styleKey<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> styleVal<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">                <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">                <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">            <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>key <span class=\\"token operator\\">===</span> <span class=\\"token string\\">\\"children\\"</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">                <span class=\\"token keyword\\">let</span> children <span class=\\"token operator\\">=</span> value<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">                <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">typeof</span> children <span class=\\"token operator\\">==</span> <span class=\\"token string\\">\\"string\\"</span><span class=\\"token punctuation\\">)</span> children <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span>children<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">                children<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">forEach</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">child</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">                    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">typeof</span> child <span class=\\"token operator\\">===</span> <span class=\\"token string\\">\\"string\\"</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">                        ele<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">appendChild</span><span class=\\"token punctuation\\">(</span>document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">createTextNode</span><span class=\\"token punctuation\\">(</span>child<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">                    <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">                    <span class=\\"token function\\">render</span><span class=\\"token punctuation\\">(</span>chind<span class=\\"token punctuation\\">,</span> ele<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">                <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">                <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">            <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">            ele<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setAttribute</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">,</span> value<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">        container<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">appendChild</span><span class=\\"token punctuation\\">(</span>ele<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">    <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"><span class=\\"token function\\">render</span><span class=\\"token punctuation\\">(</span>dome<span class=\\"token punctuation\\">,</span> document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getElementById</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"root\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span></code></pre></div>"}')}}]);